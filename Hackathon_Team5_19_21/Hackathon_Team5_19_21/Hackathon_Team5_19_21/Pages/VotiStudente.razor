@page "/voti"

@using Hackathon_Team5_19_21.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext db
@using System.Linq;

<h1>Voti</h1>

<p>Visualizza i voti dei tuoi studenti</p>

@if (moduliDocente == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var moduloDocente in moduliDocente)
    {
        <table class="table table-bordered text-center">
            <thead>
                <tr>
                    <th class="text-center" colspan="6">@moduloDocente.Nome @moduloDocente.DataInizio.ToShortDateString() - @moduloDocente.DataFine.Value.ToShortDateString()</th>
                </tr>
                <tr>
                    <th>ID</th>
                    <th>Nome</th>
                    <th>Cognome</th>
                    <th>Data Nascita</th>
                    <th>Voto</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (votiDocente.FindAll(x=>x.IdModulo==moduloDocente.Id).Count >0)
                {
                    @foreach (var x in votiDocente.FindAll(x => x.IdModulo == moduloDocente.Id))
                    {
                        <tr>
                            <td class="align-middle">@x?.ID</td>
                            <td class="align-middle">@x?.Nome</td>
                            <td class="align-middle">@x?.Cognome</td>
                            <td class="align-middle"></td>
                            <td class="align-middle" @ondblclick="(e)=>Td_DoubleClick(e)"><span class="@spanClass">@x?.Voto</span><input type="number" class="@inputClass" Value="@x?.Voto" /></td>
                            <td class="align-middle"><a href="dettaglio-studente/@x?.ID" class="btn btn-warning">Dettaglio</a></td>
                        </tr>
                    }
                }

            </tbody>
        </table>
    }
}

@code {
    private string spanClass = "d-block";
    private string inputClass = "d-none form-control";
    private List<Studente> studenti;
    private List<StudenteIscritto> studentiIscritti;
    private List<Esame> esami;
    private List<Modulo> moduli;
    private List<PersonaFitstic> docenti;
    private List<Corso> corsi;

    private List<Modulo> moduliDocente;

    private List<VotiDocente> votiDocente;

    public class VotiDocente
    {
        public int ID { get; set; }
        public string Nome { get; set; }
        public string Cognome { get; set; }
        public int? Voto { get; set; }
        public int IdModulo { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        studenti = await db.Studenti.ToListAsync();
        studentiIscritti = await db.StudentiIscritti.ToListAsync();
        esami = await db.Esami.ToListAsync();
        docenti = await db.PersonaleFitstic.ToListAsync();
        moduli = await db.Moduli.ToListAsync();
        corsi = await db.Corsi.ToListAsync();
        moduliDocente = GetModuliDocente();
        votiDocente = GetVotiDocente();

    }
    public List<Modulo> GetModuliDocente()
    {
        return (from modulo in moduli
                join docente in docenti on modulo.IdDocente equals docente.Id
                where docente.Docente == true
                select modulo).AsQueryable().ToList();
    }
    public List<VotiDocente> GetVotiDocente()
    {
        List<VotiDocente> voti = new List<VotiDocente>();
        var q1 = (from studente in studenti
                  join studenteIscritto in studentiIscritti on studente.Id equals studenteIscritto.IdStudente
                  join esame in esami on studenteIscritto.Id equals esame.IdStudenteIscritto
                  select new VotiDocente { ID = studente.Id, Nome = studente.Nome, Cognome = studente.Cognome, Voto = esame.Voto, IdModulo = esame.IdModulo }).ToList();

        var q2 = (from studente in studenti
                  join studenteIscritto in studentiIscritti on studente.Id equals studenteIscritto.IdStudente
                  join corso in corsi on studenteIscritto.IdCorso equals corso.Id
                  join modulo in moduli on corso.Id equals modulo.IdCorso
                  select new VotiDocente { ID = studente.Id, Nome = studente.Nome, Cognome = studente.Cognome, Voto = null, IdModulo = modulo.Id }).ToList();

        foreach(var studenteQ2 in q2)
        {
            if (q1.Find(x => x.ID == studenteQ2.ID && x.IdModulo == studenteQ2.IdModulo) == null) voti.Add(studenteQ2);
            else voti.Add(q1.Find(x => x.ID == studenteQ2.ID && x.IdModulo == studenteQ2.IdModulo));
        }

        return voti;
    }
    public void Td_DoubleClick(EventArgs e)
    {
        Console.WriteLine(e.ToString());
        if (spanClass == "d-block")
        {
            spanClass = "d-none";
            inputClass = "d-block form-control";
        }
    }
}
